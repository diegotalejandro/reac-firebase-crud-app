{"version":3,"sources":["firebase.js","components/LinkForm.jsx","components/Links.jsx","App.js","serviceWorker.js","index.js"],"names":["fb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","LinkForm","props","initialStateValues","urlweb","websitename","description","useState","values","setValues","handleChangeValues","e","target","name","value","handleSubmit","preventDefault","console","log","addOrEditLink","getLinkById","id","a","collection","doc","get","data","useEffect","currentId","initialValues","onSubmit","errors","touched","handleBlur","isSubmitting","className","for","type","onChange","onBlur","placeholder","htmlFor","rows","disabled","Links","setLinks","setCurrentId","linkObject","set","toast","update","OnDeleteClick","window","confirm","delete","autoClose","getLinks","onSnapshot","querySnapshot","docs","forEach","push","map","link","key","onClick","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iYAgBMA,G,YAAKC,IAASC,cAXC,CACnBC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBAIjBT,IAASU,YAEF,IAAMC,EAAKZ,EAAGa,YCwGNC,G,MAtHE,SAACC,GAChB,IAAMC,EAAqB,CACzBC,OAAQ,GACRC,YAAa,GACbC,YAAa,IAJW,EAOEC,mBAASJ,GAPX,mBAOnBK,EAPmB,KAOXC,EAPW,KASpBC,EAAqB,SAACC,GAAO,IAAD,EACRA,EAAEC,OAAlBC,EADwB,EACxBA,KAAMC,EADkB,EAClBA,MACdL,EAAU,2BAAKD,GAAN,kBAAeK,EAAOC,MAG3BC,EAAe,SAACJ,GACpBA,EAAEK,iBACFC,QAAQC,IAAIV,GACZN,EAAMiB,cAAcX,GACpBC,EAAU,eAAKN,KAGXiB,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACAvB,EAAGwB,WAAW,SAASC,IAAIH,GAAII,MAD/B,OACZD,EADY,OAElBf,EAAU,eAAKe,EAAIE,SAFD,2CAAH,sDAajB,OARAC,qBAAU,WACgB,KAApBzB,EAAM0B,UACRnB,EAAU,eAAKN,IAEfiB,EAAYlB,EAAM0B,aAEnB,CAAC1B,EAAM0B,YAGR,oCACE,kBAAC,IAAD,CACEC,cAAerB,EAEfsB,SAAUf,IAET,gBAECgB,EAFD,EAECA,OACAC,EAHD,EAGCA,QAEAC,EALD,EAKCA,WAEAC,EAPD,EAOCA,aAPD,OAUC,0BAAMC,UAAU,iBAAiBL,SAAUf,GACzC,yBAAKoB,UAAU,cACb,2BAAOC,IAAI,UAAX,sBACA,yBAAKD,UAAU,0BACb,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,kBAAb,gBAEF,2BACEA,UAAU,eACVE,KAAK,OACLxB,KAAK,SACLyB,SAAU5B,EACV6B,OAAQN,EACRnB,MAAON,EAAOJ,OACdoC,YAAY,yBAEbT,EAAO3B,QAAU4B,EAAQ5B,QAAU2B,EAAO3B,SAI/C,yBAAK+B,UAAU,cACb,2BAAOC,IAAI,eAAX,uBACA,yBAAKD,UAAU,0BACb,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,kBAAb,WAEF,2BACEA,UAAU,eACVE,KAAK,OACLxB,KAAK,cACLyB,SAAU5B,EACV6B,OAAQN,EACRnB,MAAON,EAAOH,YACdmC,YAAY,YAEbT,EAAO1B,aACN2B,EAAQ3B,aACR0B,EAAO1B,cAIb,yBAAK8B,UAAU,eACb,2BAAOM,QAAQ,eAAf,eACA,8BACE3B,MAAON,EAAOF,YACdgC,SAAU5B,EACVG,KAAK,cACL6B,KAAK,IACLP,UAAU,eACVK,YAAY,iBAIhB,4BACEL,UAAU,4BACVE,KAAK,SACLM,SAAUT,GAEW,KAApBhC,EAAM0B,UAAmB,OAAS,iB,QCxBlCgB,EArFD,WAAO,IAAD,EAEQrC,mBAAS,IAFjB,mBAEXqC,EAFW,KAEJC,EAFI,OAGetC,mBAAS,IAHxB,mBAGXqB,EAHW,KAGAkB,EAHA,KAMd3B,EAAa,uCAAG,WAAO4B,GAAP,SAAAzB,EAAA,yDACF,KAAdM,EADgB,gCAEV7B,EAAGwB,WAAW,SAASC,MAAMwB,IAAID,GAFvB,OAGhBE,YAAM,iBAAkB,CACtBZ,KAAM,YAJQ,uCAOZtC,EAAGwB,WAAW,SAASC,IAAII,GAAWsB,OAAOH,GAPjC,OAQlBE,YAAM,4BAA6B,CACjCZ,KAAM,SAERS,EAAa,IAXK,4CAAH,sDAeXK,EAAa,uCAAG,WAAO9B,GAAP,SAAAC,EAAA,0DAChB8B,OAAOC,QAAQ,8CADC,gCAEdtD,EAAGwB,WAAW,SAASC,IAAIH,GAAIiC,SAFjB,OAGpBL,YAAM,4BAA6B,CACjCZ,KAAM,QACNkB,UAAW,MALO,2CAAH,sDAUbC,EAAQ,uCAAG,sBAAAlC,EAAA,sDACfvB,EAAGwB,WAAW,SAASkC,YAAW,SAACC,GACjC,IAAMC,EAAO,GACbD,EAAcE,SAAQ,SAACpC,GAChBmC,EAAKE,KAAL,2BAAcrC,EAAIE,QAAlB,IAA0BL,GAAGG,EAAIH,SAExCwB,EAASc,MANI,2CAAH,qDAcd,OAJAhC,qBAAU,WACN6B,MACD,IAGD,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,gBACb,kBAAC,EAAa,CAAEhB,gBAAeS,YAAWgB,WAE5C,yBAAKT,UAAU,gBACZS,EAAMkB,KAAI,SAACC,GAAD,OACT,yBAAK5B,UAAU,YAAY6B,IAAKD,EAAK1C,IACnC,yBAAKc,UAAU,aACb,yBAAKA,UAAU,kCACb,4BAAK4B,EAAK1D,aACV,6BACE,uBACE8B,UAAU,iBACV8B,QAAS,kBAAMnB,EAAaiB,EAAK1C,MAFnC,UAMA,uBACEc,UAAU,6BACV8B,QAAS,kBAAMd,EAAcY,EAAK1C,MAFpC,WAQJ,2BAAI0C,EAAKzD,aACT,uBAAG4D,KAAMH,EAAK3D,OAAQQ,OAAO,SAASuD,IAAI,uBAA1C,0B,MC3DDC,MAbf,WACE,OACE,yBAAKjC,UAAU,IACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,kBAAC,IAAD,SCDYkC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2D,YCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.99f9d4dd.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/analytics\"\nimport 'firebase/firestore'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAlK1MBF8dC9FRL5qHHRPAbHMIFn-GgO44\",\n  authDomain: \"aseguramiento-de-calidad.firebaseapp.com\",\n  databaseURL: \"https://aseguramiento-de-calidad.firebaseio.com\",\n  projectId: \"aseguramiento-de-calidad\",\n  storageBucket: \"aseguramiento-de-calidad.appspot.com\",\n  messagingSenderId: \"220027386272\",\n  appId: \"1:220027386272:web:039b56be9db96673a48cc5\",\n  measurementId: \"G-LGG31SHV4B\",\n};\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport const db = fb.firestore();\n\n\n","import React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport { db } from \"../firebase\";\nimport './styles/Links.css';\n\nconst LinkForm = (props) => {\n  const initialStateValues = {\n    urlweb: \"\",\n    websitename: \"\",\n    description: \"\",\n  };\n\n  const [values, setValues] = useState(initialStateValues);\n\n  const handleChangeValues = (e) => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(values);\n    props.addOrEditLink(values);\n    setValues({ ...initialStateValues });\n  };\n\n  const getLinkById = async (id) => {\n    const doc = await db.collection(\"links\").doc(id).get();\n    setValues({ ...doc.data() });\n  };\n\n  useEffect(() => {\n    if (props.currentId === \"\") {\n      setValues({ ...initialStateValues });\n    } else {\n      getLinkById(props.currentId);\n    }\n  }, [props.currentId]);\n\n  return (\n    <>\n      <Formik\n        initialValues={values}\n        //validate={}\n        onSubmit={handleSubmit}\n      >\n        {({\n          //values,\n          errors,\n          touched,\n          //handleChange,\n          handleBlur,\n          /*handleSubmit,*/\n          isSubmitting,\n          /* and other goodies */\n        }) => (\n          <form className=\"card card-body\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label for=\"urlweb\">Url of the website</label>\n              <div className=\"form-group input-group\">\n                <div className=\"input-group-text bg-light\">\n                  <i className=\"material-icons\">insert_link</i>\n                </div>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"urlweb\"\n                  onChange={handleChangeValues}\n                  onBlur={handleBlur}\n                  value={values.urlweb}\n                  placeholder=\"https://example.com/\"\n                />\n                {errors.urlweb && touched.urlweb && errors.urlweb}\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label for=\"websitename\">Name of the website</label>\n              <div className=\"form-group input-group\">\n                <div className=\"input-group-text bg-light\">\n                  <i className=\"material-icons\">create</i>\n                </div>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"websitename\"\n                  onChange={handleChangeValues}\n                  onBlur={handleBlur}\n                  value={values.websitename}\n                  placeholder=\"example\"\n                />\n                {errors.websitename &&\n                  touched.websitename &&\n                  errors.websitename}\n              </div>\n            </div>\n\n            <div className=\"form-group \">\n              <label htmlFor=\"description\">Description</label>\n              <textarea\n                value={values.description}\n                onChange={handleChangeValues}\n                name=\"description\"\n                rows=\"3\"\n                className=\"form-control\"\n                placeholder=\"Description\"\n              ></textarea>\n            </div>\n\n            <button\n              className=\"btn btn-primary btn-block\"\n              type=\"submit\"\n              disabled={isSubmitting}\n            >\n              {props.currentId === \"\" ? \"Save\" : \"Update\"}\n            </button>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default LinkForm;\n","import React,{useEffect, useState} from \"react\";\nimport LinkForm from \"./LinkForm\";\nimport {db} from '../firebase'\nimport { toast } from \"react-toastify\";\n\nconst Links = () => {\n\n  const [Links, setLinks] = useState([]);\n  const [currentId, setCurrentId] =useState('');\n\n\nconst addOrEditLink = async (linkObject) => { \n  if (currentId === '') {\n      await db.collection(\"links\").doc().set(linkObject);\n      toast(\"New Link Added\", {\n        type: \"success\",\n      });\n  } else{\n    await db.collection('links').doc(currentId).update(linkObject);\n    toast(\"Link Updated Successfully\", {\n      type: \"info\",\n    });\n    setCurrentId('');\n  }\n};\n\n  const OnDeleteClick = async (id) => {\n    if (window.confirm(\"are you sure you want to delete this link?\")) {    \n    await db.collection('links').doc(id).delete();\n    toast(\"Link Removed Successfully\", {\n      type: \"error\",\n      autoClose: 2000,\n    });\n    }\n  };\n\n  const getLinks = async () => {\n    db.collection('links').onSnapshot((querySnapshot) => {\n      const docs = [];\n      querySnapshot.forEach((doc) => {             \n             docs.push({...doc.data(), id:doc.id});\n          });\n      setLinks(docs);\n    });\n  };\n\n  useEffect(() => {\n      getLinks();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-md-8 p-2\">\n          <LinkForm {...{ addOrEditLink, currentId, Links }} />\n        </div>\n        <div className=\"col-md-8 p-2\">\n          {Links.map((link) => (\n            <div className=\"card mb-1\" key={link.id}>\n              <div className=\"card-body\">\n                <div className=\"d-flex justify-content-between\">\n                  <h4>{link.websitename}</h4>\n                  <div>\n                    <i\n                      className=\"material-icons\"\n                      onClick={() => setCurrentId(link.id)}\n                    >\n                      create\n                    </i>\n                    <i\n                      className=\"material-icons text-danger\"\n                      onClick={() => OnDeleteClick(link.id)}\n                    >\n                      close\n                    </i>\n                  </div>\n                </div>\n                <p>{link.description}</p>\n                <a href={link.urlweb} target=\"_blank\" rel=\"noopener noreferrer\">\n                  Go to Website\n                </a>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Links;\n","import React from 'react';\nimport './App.css';\nimport Links from './components/Links'\nimport {ToastContainer} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <div className=\"container p-4\">\n        <div className=\"row\">\n          <Links />\n        </div>\n        <ToastContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './firebase';\n//import 'bootswatch/dist/superhero/bootstrap.min.css'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n//import $ from \"jquery\";\n//import Popper from \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}